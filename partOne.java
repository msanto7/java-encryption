//COSC 450 Assignment 1 Part 1
//Group: Fongheiser
import java.util.*;
import java.security.*;
import javax.crypto.spec.*;
import javax.crypto.Cipher;
import java.io.*;
import javax.xml.bind.DatatypeConverter;

public class partOne{ 
  
  public static void main(String[] args) throws Exception{
      
    Scanner scan = new Scanner(System.in);  
    
    System.out.println("Values K and IV will be automatically generated by the hexidecimal generator.");    
    //Automatically populates k, iV with hexidecimal characters of length 4
    StringBuffer k = new StringBuffer(getHexString(4));//4 digit key called 'k'
    StringBuffer iV = new StringBuffer(getHexString(4));//4 digit key called 'IV'
    
    System.out.println("Input four characters: ");
    StringBuffer s = new StringBuffer(scan.next());//4 character plaintext string
    
      while(s.length() != 4){
        System.out.println("!Error! Input FOUR characters: ");  //input validation 
         s = new StringBuffer(scan.next());
      } //Ends while 
    
    System.out.println("The characters entered is: "+s);
    System.out.println("The key is: "+ k);
    System.out.println("The Initial Vector is: " + iV);
        
    //Creates the ES, EK, EIV variables as empty StringBuffers
    StringBuffer eS = new StringBuffer("");
    StringBuffer eK = new StringBuffer("");
    StringBuffer eIV = new StringBuffer("");
    
    for(int i = 0; i < 4; i++){//Multiplies them four times
     eK.append(k); 
     eIV.append(iV);
     eS.append(s);
    }
    
    //Prints out the k and iV values after multiplication 
    System.out.println("The Key (after being multiplied 4 times) is: " + eK);
    System.out.println("The Initial Vector (after being multiplied 4 times) is: " + eIV);
    
    //Transforms the stringbuilders into byte arrays
    byte encryptString[] = eS.toString().getBytes("UTF-8");
    byte encryptKey[] = eK.toString().getBytes("UTF-8");
    byte encryptIVector[] = eIV.toString().getBytes("UTF-8");
    
    //Calls the encrypt and decrypt functions and prints the output
    byte[] encryptedText = encrypt(encryptString, encryptKey, encryptIVector);
    
    //Prints the encrypted text after conversion to string
    System.out.println("The encrypted string (after being multiplied 4 times) is: " +DatatypeConverter.printBase64Binary(encryptedText));
    
    //Calls the decrypt function to decrypt the cipher to plain text
    String decryptedText = decrypt(encryptedText, encryptKey, encryptIVector);
    System.out.println("Text (after being multiplied 4 times) after decryption: " + decryptedText);    
    
    System.out.println("The original text: " + decryptedText.substring(0,4));
    
    } //Ends Main
  
  //Function to return a hex value of a requested length (numChar)
  private static String getHexString(int numChar){
     Random rand = new Random();
     StringBuffer sb = new StringBuffer();
     while(sb.length() < numChar){
      sb.append(Integer.toHexString(rand.nextInt())); 
     }
     return sb.toString().substring(0, numChar);
  }
  
  //Function to encrypt the users input
  public static byte[] encrypt(byte[] eS, byte[] eK, byte[] eIV){
    try{
      IvParameterSpec iV = new IvParameterSpec(eIV);
      SecretKeySpec secKey = new SecretKeySpec(eK, "AES");
      
      Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
      cipher.init(Cipher.ENCRYPT_MODE, secKey, iV);
      
      byte[] encrypted = cipher.doFinal(eS);      
      return encrypted;
      
    }catch (Exception ex){
     ex.printStackTrace(); 
    }
    return null;
  }
  
  //Function to decrypt the cipher back to plain text
  public static String decrypt(byte[] cipherText, byte[] eK, byte[] eIV){
    try{
      Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
      SecretKeySpec key = new SecretKeySpec(eK,"AES");
      cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(eIV));
      return new String(cipher.doFinal(cipherText),"UTF-8");
     }catch (Exception ex){
     ex.printStackTrace(); 
    }
    return null;
  }
  
} //Ends Class